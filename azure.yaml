name: magentic-ui
metadata:
  template: magentic-ui-terraform@0.0.1-beta
infra:
  provider: terraform
  path: ./terraform
services:
  web:
    project: .
    language: py
    host: containerapp
  vnc-browser:
    project: .
    language: py
    host: containerapp
hooks:
  preprovision:
    posix:
      shell: sh
      run: |
        echo "🔧 Preparing Terraform configuration..."
        # Ensure required environment variables are set
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY is required. Please set it in .env file."
          exit 1
        fi
        
        # Generate terraform.tfvars from template
        echo "📝 Generating Terraform variables..."
        if [ -f "terraform/terraform.tfvars.tmpl" ]; then
          # Copy template and perform safe substitutions
          cp terraform/terraform.tfvars.tmpl terraform/terraform.tfvars
          
          # Escape special characters in environment variables for sed
          escape_for_sed() {
            printf '%s\n' "$1" | sed 's/[[\.*^$()+?{|]/\\&/g'
          }
          
          # Generate resource token if not provided
          RESOURCE_TOKEN="${AZURE_RESOURCE_TOKEN:-$(openssl rand -hex 3)}"
          
          # Use | as delimiter to avoid issues with URLs and paths
          sed -i.bak \
            -e "s|{{ \.Env\.AZURE_ENV_NAME }}|${AZURE_ENV_NAME}|g" \
            -e "s|{{ \.Env\.AZURE_LOCATION }}|${AZURE_LOCATION}|g" \
            -e "s|{{ \.Env\.OPENAI_API_KEY }}|$(escape_for_sed "${OPENAI_API_KEY}")|g" \
            -e "s|{{ \.Env\.AZURE_OPENAI_ENDPOINT }}|$(escape_for_sed "${AZURE_OPENAI_ENDPOINT:-}")|g" \
            -e "s|{{ \.Env\.AZURE_OPENAI_API_KEY }}|$(escape_for_sed "${AZURE_OPENAI_API_KEY:-}")|g" \
            -e "s|{{ \.Env\.ANTHROPIC_API_KEY }}|$(escape_for_sed "${ANTHROPIC_API_KEY:-}")|g" \
            -e "s|{{ \.Env\.VNC_PASSWORD }}|$(escape_for_sed "${VNC_PASSWORD:-magentic123!}")|g" \
            -e "s|{{ \.Env\.ENABLE_VNC_BROWSER }}|${ENABLE_VNC_BROWSER:-true}|g" \
            -e "s|{{ \.Env\.CONTAINER_CPU_CORES }}|${CONTAINER_CPU_CORES:-1.0}|g" \
            -e "s|{{ \.Env\.CONTAINER_MEMORY_GB }}|${CONTAINER_MEMORY_GB:-2.0}|g" \
            -e "s|{{ \.Env\.VNC_CONTAINER_CPU_CORES }}|${VNC_CONTAINER_CPU_CORES:-0.5}|g" \
            -e "s|{{ \.Env\.VNC_CONTAINER_MEMORY_GB }}|${VNC_CONTAINER_MEMORY_GB:-1.0}|g" \
            -e "s|{{ \.Env\.AZURE_RESOURCE_TOKEN }}|${RESOURCE_TOKEN}|g" \
            -e "s|{{ \.Env\.AZURE_PRINCIPAL_ID }}|${AZURE_PRINCIPAL_ID:-}|g" \
            terraform/terraform.tfvars
          
          # Remove backup file
          rm -f terraform/terraform.tfvars.bak
          
          echo "✅ Generated terraform.tfvars with environment variables"
          
          # Also generate main.tfvars.json for azd compatibility
          echo "📝 Generating main.tfvars.json for azd..."
          echo "{" > terraform/main.tfvars.json
          echo "  \"environmentName\": \"${AZURE_ENV_NAME}\"," >> terraform/main.tfvars.json
          echo "  \"location\": \"${AZURE_LOCATION}\"," >> terraform/main.tfvars.json
          echo "  \"openai_api_key\": \"${OPENAI_API_KEY}\"," >> terraform/main.tfvars.json
          echo "  \"azure_openai_endpoint\": \"${AZURE_OPENAI_ENDPOINT:-}\"," >> terraform/main.tfvars.json
          echo "  \"azure_openai_api_key\": \"${AZURE_OPENAI_API_KEY:-}\"," >> terraform/main.tfvars.json
          echo "  \"anthropic_api_key\": \"${ANTHROPIC_API_KEY:-}\"," >> terraform/main.tfvars.json
          echo "  \"vnc_password\": \"${VNC_PASSWORD:-magentic123!}\"," >> terraform/main.tfvars.json
          echo "  \"enable_vnc_browser\": ${ENABLE_VNC_BROWSER:-true}," >> terraform/main.tfvars.json
          echo "  \"container_cpu\": ${CONTAINER_CPU_CORES:-1.0}," >> terraform/main.tfvars.json
          echo "  \"container_memory\": ${CONTAINER_MEMORY_GB:-2.0}," >> terraform/main.tfvars.json
          echo "  \"vnc_container_cpu\": ${VNC_CONTAINER_CPU_CORES:-0.5}," >> terraform/main.tfvars.json
          echo "  \"vnc_container_memory\": ${VNC_CONTAINER_MEMORY_GB:-1.0}," >> terraform/main.tfvars.json
          echo "  \"resourceToken\": \"${RESOURCE_TOKEN}\"," >> terraform/main.tfvars.json
          echo "  \"principalId\": \"${AZURE_PRINCIPAL_ID:-}\"" >> terraform/main.tfvars.json
          echo "}" >> terraform/main.tfvars.json
          echo "✅ Generated main.tfvars.json for azd"
        fi
    windows:
      shell: pwsh
      run: |
        Write-Host "🔧 Preparing Terraform configuration..." -ForegroundColor Blue
        if (-not $env:OPENAI_API_KEY) {
          Write-Host "❌ OPENAI_API_KEY is required. Please set it in .env file." -ForegroundColor Red
          exit 1
        }
        
        # Generate terraform.tfvars from template (Windows version)
        if (Test-Path "terraform/terraform.tfvars.tmpl") {
          Write-Host "📝 Generating Terraform variables..." -ForegroundColor Yellow
          $content = Get-Content "terraform/terraform.tfvars.tmpl" -Raw
          $content = $content -replace '{{ .Env.AZURE_ENV_NAME }}', $env:AZURE_ENV_NAME
          $content = $content -replace '{{ .Env.AZURE_LOCATION }}', $env:AZURE_LOCATION
          $content = $content -replace '{{ .Env.OPENAI_API_KEY }}', $env:OPENAI_API_KEY
          $content | Out-File "terraform/terraform.tfvars" -Encoding UTF8
        }
  postprovision:
    posix:
      shell: sh
      run: |
        echo "🚀 Post-provision setup..."
        echo "✅ Magentic-UI infrastructure is ready!"
        echo "📋 Next steps:"
        echo "   1. Run 'azd deploy' to deploy the application"
        echo "   2. Access your application at the provided URL"
    windows:
      shell: pwsh
      run: |
        Write-Host "🚀 Post-provision setup..." -ForegroundColor Blue
        Write-Host "✅ Magentic-UI infrastructure is ready!" -ForegroundColor Green
        Write-Host "📋 Next steps:" -ForegroundColor Yellow
        Write-Host "   1. Run 'azd deploy' to deploy the application" -ForegroundColor White
        Write-Host "   2. Access your application at the provided URL" -ForegroundColor White
